#!/usr/bin/env python3
#
# Check_MK YUM Plugin - Check for upgradeable packages.
#
# Copyright 2015, Henri Wahl <h.wahl@ifw-dresden.de>
# Copyright 2018, Moritz Schlarb <schlarbm@uni-mainz.de>
# Copyright 2021, Marco Lenhardt <marco.lenhardt@ontec.at>
# Copyright 2021, Henrik Gie√üel <henrik.giessel@yahoo.de>
# Based on:
#
# Check_MK APT-NG Plugin - Check for upgradeable packages.
#
# Copyright 2012, Stefan Schlesinger <sts@ono.at>
# Copyright 2015, Karsten Schoeke <karsten.schoeke@geobasis-bb.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Example Agent Output:
#
# <<<yum>>>
# yes
# 32
# 4
# 1626252300

from datetime import datetime
from time import time

factory_settings["yum_default_levels"] = {
    "reboot_req" : 2,
    "normal": 1,
    "security": 2,
    "last_update_state": 0,
    "last_update_time_diff": (60*24*60*60),
}

def inventory_yum(info):
    if len(info) > 0:
        return [(None, {})]

# the check function
def check_yum(_no_item, params, info):
    level        = 0
    msg          = ''
    reboot_req   = 'no'
    packages     = -1
    security_packages = -1
    perfdata     = []
    
    # Parse the agent output
    if len(info) > 0:
        reboot_req   = info[0][0]
        if not reboot_req in ('yes', 'no'):
            reboot_req = ''
        
    if len(info) > 1:
        try:
            packages = int(info[1][0])
        except:
            packages = -1

        try:
            security_packages = int(info[2][0])
        except:
            security_packages = -1
            
        try:
            last_update_timestamp = int(info[3][0])
        except:
            last_update_timestamp = -1

        if packages < 0:
            level = 3
            yield level, 'No package information available'
        elif packages == 0 and security_packages <= 0:
            yield 0, "All packages are up to date"

        elif packages > 0:
            level = params["normal"]
            yield level, "%d updates available" % packages, [("normal_updates", packages)]

        if security_packages > 0:
            level = params["security"]
            yield level, "%d security updates available" % security_packages, [("security_updates", security_packages)]
        
        if last_update_timestamp < 0:
            level = params["last_update_state"]
            yield level, "%d Time of last update could not be found" % last_update_timestamp, [("last_update_timestamp", last_update_timestamp)]
        
        elif last_update_timestamp > 0:
            level = params["last_update_state"]
            last_update_timestamp_diff = params["last_update_time_diff"]
            current_timestamp=int(time())

            if current_timestamp - last_update_timestamp < last_update_timestamp_diff:
                yield 0, "Last Update was run at %s"  % datetime.fromtimestamp(last_update_timestamp)

            elif current_timestamp - last_update_timestamp > last_update_timestamp_diff and packages == 0:
                yield 0, "Last Update was too long ago at %s but there are no pending updates"  % datetime.fromtimestamp(last_update_timestamp)
            
            else:
                yield level, "Last Update was too long ago at %s and there are pending updates" % datetime.fromtimestamp(last_update_timestamp)


    if (reboot_req == "yes"):
        # fallback for < 2.0.6
        if params == None:
            level = 2
        else:
            level = params["reboot_req"]
        yield level,  "reboot required"


check_info["yum"] = {
        "check_function"            : check_yum,
        "service_description"       : "YUM Updates",
        "has_perfdata"              : True,
        "inventory_function"        : inventory_yum,
        "group"                     : "yum",
        "default_levels_variable"   : "yum_default_levels",
}