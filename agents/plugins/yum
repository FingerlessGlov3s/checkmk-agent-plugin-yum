#!/bin/bash

if [ -z $MK_VARDIR ]; then
    echo "Unable to load ENV variables"
    exit 2
fi

BOOT_REQUIRED=no
UPDATES=0
YUM_STATE_CACHE=$MK_VARDIR/cache/yum_state.cache
YUM_CHECK_CACHE=$MK_VARDIR/cache/yum_check.cache

# get current yum state - use cache directory contents as fingerprint
YUM_CURRENT="$(ls -lR /var/cache/yum/ || ls -lR /var/cache/dnf/)"

# check if cached listing of /var/cache/yum already exists - create empty one otherwise
if [ ! -e $YUM_CHECK_CACHE ]
then
    touch $YUM_CHECK_CACHE
elif [ ! -f $YUM_CHECK_CACHE ] || [ -L $YUM_CHECK_CACHE ]
then
    # something is wrong here...
    echo "invalid cache file"
    exit 2
else
    # get cached information
    YUM_CACHED=$(cat $YUM_CHECK_CACHE)
fi

# check if cached check result already exists and is nothing but a file
if [ ! -e $YUM_STATE_CACHE  ]
then
    touch $YUM_STATE_CACHE
elif [ ! -f $YUM_STATE_CACHE ] || [ -L $YUM_STATE_CACHE ]
then
    # something is wrong here...
    echo "invalid cache file"
    exit 2
fi

# check if system has rebooted - if so, remove cached check file to avoid wrong "reboot required"-state
RUNNING_SECS=$(cat /proc/uptime | cut -d" " -f1 | cut -d"." -f1)

# assume 120 seconds for reboot being enough
if (( $RUNNING_SECS < 120 ))
then
    # remove pre-reboot cache which requires reboot
    rm -f $YUM_STATE_CACHE
    # create empty check cache
    touch $YUM_STATE_CACHE
fi

echo "<<<yum>>>"

# compare current and cached yum informations
if [ "$YUM_CURRENT" != "$YUM_CACHED)" ] && [ ! -s $YUM_STATE_CACHE ]
then
    count=0
        while [ ! -z $(pgrep -f "python /usr/bin/yum") ]; do
            if [ $count -eq 3 ]; then
                echo "Tryed to run yum for 30 secs but another yum instance was running"
                exit 2
            else
                let count++
                sleep 10
            fi
        done
    LATEST_KERNEL=$(yum -q -C --noplugins --debuglevel 0 list installed | egrep "^(vz)?kernel(|-(uek|ml|lt))\." | grep "\." | tail -n1 | awk '{print $2};')
    RUNNING_KERNEL=$(cat /proc/version | awk '{print $3}' | sed 's/.x86_64//g')
    if [[ "$RUNNING_KERNEL" == "$LATEST_KERNEL"* ]]
    then
        BOOT_REQUIRED="no"
    else
        BOOT_REQUIRED="yes"
    fi
    UPDATES=$(waitmax 25 /usr/bin/yum -C --noplugins --quiet list updates | grep "\." | cut -d' ' -f1 | wc -l || echo "-1")
    echo $BOOT_REQUIRED
    echo $UPDATES
    # cache check yum
    # check if cached check already exists and is nothing but a file
    if [ -f $YUM_CHECK_CACHE ] || [ ! -L $YUM_CHECK_CACHE ]; then
        echo "$YUM_CURRENT" > $YUM_CHECK_CACHE
    else
        # something is wrong here...
        echo "invalid check cache file"
        exit 2
    fi
    # cache check results
    # check if cached check result already exists and is nothing but a file
    if [ -f $YUM_STATE_CACHE ] || [ ! -L $YUM_STATE_CACHE ]
    then
        echo $BOOT_REQUIRED > $YUM_STATE_CACHE
        echo $UPDATES >> $YUM_STATE_CACHE
    else
        # something is wrong here...
        echo "invalid check result cache file"
        exit 2
    fi
else
    # use cache file
    cat $YUM_STATE_CACHE
fi